
-- SQL to generate IDs and Genres based off TMDB
-- must have 2 tables (genres, movie_genres) created before joining table and adding id and key

-- Create genres table
CREATE TABLE genres (
  id INT8 PRIMARY KEY,
  name TEXT NOT NULL
);

CREATE TABLE movie_genres (
  movie_id INT8 NOT NULL REFERENCES movies(id) ON DELETE CASCADE,
  genre_id INT8 NOT NULL REFERENCES genres(id) ON DELETE CASCADE,
  PRIMARY KEY (movie_id, genre_id)
);

-- Create a Joining table
CREATE TABLE movie_genres (
  movie_id INT8 NOT NULL REFERENCES movies(id) ON DELETE CASCADE,
  genre_id INT8 NOT NULL REFERENCES genres(id) ON DELETE CASCADE,
  PRIMARY KEY (movie_id, genre_id)
);

-- Insert or update genres from TMDB.

INSERT INTO genres (id, name)
VALUES
    (28, 'Action'),
    (12, 'Adventure'),
    (16, 'Animation'),
    (35, 'Comedy'),
    (80, 'Crime'),
    (99, 'Documentary'),
    (18, 'Drama'),
    (10751, 'Family'),
    (14, 'Fantasy'),
    (36, 'History'),
    (27, 'Horror'),
    (10402, 'Music'),
    (9648, 'Mystery'),
    (10749, 'Romance'),
    (878, 'Science Fiction'),
    (10770, 'TV Movie'),
    (53, 'Thriller'),
    (10752, 'War'),
    (37, 'Western')
ON CONFLICT (id) DO UPDATE SET name = excluded.name;


-- Make tags table
CREATE TABLE tags (
  id BIGSERIAL PRIMARY KEY,
  name TEXT NOT NULL UNIQUE,
  slug TEXT NOT NULL UNIQUE,
  created_at TIMESTAMPTZ DEFAULT NOW()
);

-- Make post_tags table
CREATE TABLE post_tags (
  post_id BIGINT NOT NULL REFERENCES posts(id) ON DELETE CASCADE,
  tag_id BIGINT NOT NULL REFERENCES tags(id) ON DELETE CASCADE,
  created_at TIMESTAMPTZ DEFAULT NOW(),
  PRIMARY KEY (post_id, tag_id)
);

-- Index for faster tag searches
CREATE INDEX idx_post_tags_tag_id ON post_tags(tag_id);
CREATE INDEX idx_post_tags_post_id ON post_tags(post_id);